@page "/Meus_Eventos"
@using Client.Services
@inject ApiService ApiService
@inject IJSRuntime JS
@inject NavigationManager NavigationManager

<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h1 class="fw-bold">üìå Meus Eventos</h1>
    </div>

    <div class="search-bar d-flex flex-wrap gap-3 align-items-center mb-4">
        <input type="text" class="form-control flex-grow-1" @bind="searchTerm" placeholder="üîç Pesquisar por nome"/>

        <button class="btn btn-outline-success" @onclick="AplicarFiltros">Aplicar Filtros</button>

        <select class="form-select w-auto" @bind="selectedCategory">
            <option value="">üìÇ Categorias</option>
            @foreach (var categoria in categorias)
            {
                <option value="@categoria">@categoria</option>
            }
        </select>

        <select class="form-select w-auto" @bind="selectedLocation">
            <option value="">üìç Localidades</option>
            @foreach (var loc in local)
            {
                <option value="@loc">@loc</option>
            }
        </select>

        <select class="form-select w-auto" @bind="selectedTime">
            <option value="">üïí Datas</option>
            @foreach (var time in data)
            {
                <option value="@time">@time</option>
            }
        </select>
    </div>

    @if (isLoading)
    {
        <div class="loading">A carregar os seus eventos...</div>
    }
    else if (FilteredEventos.Any())
    {
        <div class="event-container">
            @foreach (var evento in FilteredEventos)
            {
                <div class="event-card p-3 mb-3 bg-light rounded shadow-sm">
                    <h5 class="fw-bold">@evento.Name</h5>
                    <p><strong>Data:</strong> @evento.EventStartDate.ToString("dd/MM/yyyy")</p>
                    <p><strong>Descri√ß√£o:</strong> @evento.Description</p>

                    <div class="d-flex gap-2 mt-2">
                        <button class="btn btn-primary" @onclick="() => VerDetalhes(evento.Id)">Ver Detalhes</button>
                        <button class="btn btn-danger" @onclick="() => HandleCancelarParticipacao(evento.Id)">Cancelar Participa√ß√£o</button>
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <div class="no-events">
            <p>N√£o est√° inscrito em nenhum evento.</p>
            <button class="btn btn-primary" @onclick="NavigateToAllEvents">Ver eventos dispon√≠veis</button>
        </div>
    }
</div>

<style>
    .search-bar input,
    .search-bar select { min-width: 160px; max-width: 80% }
    .event-container { margin-top: 20px; }
    .event-card { border: 1px solid #ddd; }
    input::placeholder { color: #888; }
    select { cursor: pointer; }
</style>

@code {
    private List<ApiService.EventDto> meusEventos = new();
    private List<ApiService.EventDto> todosEventos = new();
    private List<string> categorias = new();
    private List<string> local = new();
    private List<string> data = new();

    private int userId;
    private bool isLoading = true;

    private string searchTerm = string.Empty;
    private string selectedCategory = string.Empty;
    private string selectedLocation = string.Empty;
    private string selectedTime = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var userIdString = await JS.InvokeAsync<string>("localStorage.getItem", "userId");
        if (!string.IsNullOrEmpty(userIdString) && int.TryParse(userIdString, out userId))
        {
            isLoading = true;
            await LoadData();
            isLoading = false;
        }
    }

    private async Task LoadData()
    {
        meusEventos = await ApiService.GetEventsByParticipantAsync(userId);
        categorias = await ApiService.GetEventCategoriesAsync();
        local = await ApiService.GetLocalidadesAsync();
        data = await ApiService.GetDataAsync();
    }

    private async Task HandleCancelarParticipacao(int eventId)
    {
        bool success = await ApiService.CancelarParticipacaoAsync(userId, eventId);

        if (success)
        {
            await JS.InvokeVoidAsync("alert", "Participa√ß√£o cancelada com sucesso!");
            await LoadData();
            StateHasChanged();
        }
        else
        {
            await JS.InvokeVoidAsync("alert", "Erro ao cancelar a participa√ß√£o. Tente novamente.");
        }
    }

    private void NavigateToAllEvents() =>
        NavigationManager.NavigateTo("/Home_Participante");

    private void VerDetalhes(int eventId) =>
        NavigationManager.NavigateTo($"/meus-eventos-detalhes/{eventId}");

    private IEnumerable<ApiService.EventDto> FilteredEventos =>
        meusEventos.Where(e =>
            (string.IsNullOrEmpty(searchTerm) || e.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) &&
            (string.IsNullOrEmpty(selectedCategory) || e.Category == selectedCategory) &&
            (string.IsNullOrEmpty(selectedLocation) || e.Location == selectedLocation) &&
            (string.IsNullOrEmpty(selectedTime) || e.EventStartDate.ToString("yyyy-MM-dd") == selectedTime)
        );

    private void ResetFiltros()
    {
        searchTerm = string.Empty;
        selectedCategory = string.Empty;
        selectedLocation = string.Empty;
        selectedTime = string.Empty;
    }

    private async Task AtualizarFiltrosDependentes()
    {
        var filtrados = todosEventos
            .Where(e => string.IsNullOrEmpty(selectedCategory) || e.Category == selectedCategory)
            .Where(e => string.IsNullOrEmpty(selectedLocation) || e.Location == selectedLocation)
            .Where(e => string.IsNullOrEmpty(selectedTime) || e.EventStartDate.ToString("yyyy-MM-dd") == selectedTime)
            .ToList();

        categorias = filtrados.Select(e => e.Category).Distinct().ToList();
        local = filtrados.Select(e => e.Location).Distinct().ToList();
        data = filtrados.Select(e => e.EventStartDate.ToString("yyyy-MM-dd")).Distinct().ToList();

        meusEventos = filtrados;
        StateHasChanged();
    }

    private async Task AplicarFiltros()
    {
        await AtualizarFiltrosDependentes();
        ResetFiltros();
    }
}
