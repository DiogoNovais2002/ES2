@page "/Meus_Eventos"
@using Client.Services
@inject ApiService ApiService
@inject IJSRuntime JS
@inject NavigationManager NavigationManager

<h3>Meus Eventos</h3>

<div class="search-bar">
    <input type="text" @bind="searchTerm" placeholder="Pesquisar por nome" />

    <select @bind="selectedCategory" class="Combobox-large">
        <option value="">Categorias</option>
        @foreach (var categoria in categorias)
        {
            <option value="@categoria">@categoria</option>
        }
    </select>

    <select @bind="selectedLocation" class="Combobox-large">
        <option value="">Localidades</option>
        @foreach (var loc in local)
        {
            <option value="@loc">@loc</option>
        }
    </select>

    <select @bind="selectedTime" class="Combobox-large">
        <option value="">Datas</option>
        @foreach (var time in data)
        {
            <option value="@time">@time</option>
        }
    </select>

    <button class="btn btn-secondary" @onclick="NavigateToAllEvents">Ver Todos os Eventos</button>
</div>

@if (isLoading)
{
    <div class="loading">A carregar os seus eventos...</div>
}
else if (FilteredEventos.Any())
{
    <div class="event-container">
        @foreach (var evento in FilteredEventos)
        {
            <EventCard_MeusEventos Event="evento" OnCancelParticipation="HandleCancelarParticipacao" />
        }
    </div>
}
else
{
    <div class="no-events">
        <p>Não está inscrito em nenhum evento.</p>
        <button class="btn btn-primary" @onclick="NavigateToAllEvents">Ver eventos disponíveis</button>
    </div>
}

@code {
    private List<ApiService.EventDto> meusEventos = new();
    private List<string> categorias = new();
    private List<string> local = new();
    private List<string> data = new();

    private int userId;
    private bool isLoading = true;

    private string searchTerm = string.Empty;
    private string selectedCategory = string.Empty;
    private string selectedLocation = string.Empty;
    private string selectedTime = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var userIdString = await JS.InvokeAsync<string>("localStorage.getItem", "userId");
        if (!string.IsNullOrEmpty(userIdString) && int.TryParse(userIdString, out userId))
        {
            isLoading = true;
            await LoadData();
            isLoading = false;
        }
    }

    private async Task LoadData()
    {
        meusEventos = await ApiService.GetEventsByParticipantAsync(userId);
        categorias = await ApiService.GetEventCategoriesAsync();
        local = await ApiService.GetLocalidadesAsync();
        data = await ApiService.GetDataAsync();
    }

    private async Task HandleCancelarParticipacao(int eventId)
    {
        bool success = await ApiService.CancelarParticipacaoAsync(userId, eventId);

        if (success)
        {
            await JS.InvokeVoidAsync("alert", "Participação cancelada com sucesso!");
            await LoadData();
            StateHasChanged();
        }
        else
        {
            await JS.InvokeVoidAsync("alert", "Erro ao cancelar a participação. Tente novamente.");
        }
    }

    private void NavigateToAllEvents() =>
        NavigationManager.NavigateTo("/Home_Participante");

    private IEnumerable<ApiService.EventDto> FilteredEventos =>
        meusEventos.Where(e =>
            (string.IsNullOrEmpty(searchTerm) || e.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) &&
            (string.IsNullOrEmpty(selectedCategory) || e.Category == selectedCategory) &&
            (string.IsNullOrEmpty(selectedLocation) || e.Location == selectedLocation) &&
            (string.IsNullOrEmpty(selectedTime) || e.EventStartDate.ToString("yyyy-MM-dd") == selectedTime)
        );
}
