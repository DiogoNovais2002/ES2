@page "/eventos/participantes"
@inject NavigationManager Nav
@inject HttpClient Http
@inject IJSRuntime JS

<div class="container mt-4">
<div class="d-flex justify-content-between align-items-center mb-4">
    <h2 class="fw-bold">ðŸ‘¥ Participantes do Evento</h2>
    <button class="btn btn-outline-primary" @onclick="VoltarAtras">
        <i class="bi bi-arrow-left"></i> Voltar
    </button>
</div>

@if (participants == null)
{
    <div class="text-center text-muted">
        <div class="spinner-border text-secondary" role="status"></div>
        <p class="mt-2">A carregar participantes...</p>
    </div>
}
else if (participants.Count == 0)
{
    <div class="alert alert-warning text-center" role="alert">
        NÃ£o hÃ¡ participantes registados.
    </div>
}
else
{
    <div class="table-responsive">
        <table class="table table-hover table-bordered align-middle">
            <thead class="table-light">
            <tr>
                <th>Nome</th>
                <th>Email</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var user in participants)
            {
                <tr>
                    <td>@user.Name</td>
                    <td>@user.Email</td>
                </tr>
            }
            </tbody>
        </table>
    </div>
}
</div>
@code {
    private int EventId;
    private List<UserDto> participants;

    protected override async Task OnInitializedAsync()
    {
        var uri = new Uri(Nav.Uri);
        var queryParams = System.Web.HttpUtility.ParseQueryString(uri.Query);
        var idStr = queryParams.Get("eventId");

        if (int.TryParse(idStr, out int parsedId))
        {
            EventId = parsedId;

            try
            {
                participants = await Http.GetFromJsonAsync<List<UserDto>>($"api/Event/{EventId}/participants");
            }
            catch
            {
                participants = new();
            }
        }
        else
        {
            participants = new();
        }
    }

    private async Task VoltarAtras()
    {
        var userType = await JS.InvokeAsync<string>("localStorage.getItem", "userType");

        if (userType == "Organizador")
            Nav.NavigateTo("/Home_Organizador");
        else if (userType == "Participante")
            Nav.NavigateTo("/Meus_Eventos");
        else
            Nav.NavigateTo("/");
    }

    public class UserDto
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public string Email { get; set; }
    }
}