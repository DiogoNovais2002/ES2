@page "/login"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JS

<div class="login-container">
    <div class="login-card">
        <div class="card-header"></div>

        <div class="card-body">
            <h2>Login</h2>
            <EditForm Model="loginModel" OnValidSubmit="HandleLogin">
                <DataAnnotationsValidator/>
                <ValidationSummary/>

                <div class="input-group">
                    <span class="input-icon">
                        <i class="fas fa-user"></i>
                    </span>
                    <InputText @bind-Value="loginModel.Email" class="form-control" placeholder="Email"/>
                </div>

                <div class="input-group">
                    <span class="input-icon">
                        <i class="fas fa-lock"></i>
                    </span>
                    <InputText @bind-Value="loginModel.Password" class="form-control"
                               type="@(_showPassword ? "text" : "password")"
                               placeholder="Password"/>
                    <button type="button" class="toggle-password" @onclick="TogglePasswordVisibility">
                        <i class="fas @(_showPassword ? "fa-eye-slash" : "fa-eye")"></i>
                    </button>
                </div>

                <div class="options">
                    <div>
                        <input type="checkbox" id="remember"/>
                        <label for="remember">Lembrar-me</label>
                    </div>
                    <a href="#">Esqueceu a senha?</a>
                </div>

                <button type="submit" class="login-button">Entrar</button>

                <div class="create-account">
                    <a href="/register">Criar Conta</a>
                </div>
            </EditForm>

            @if (loginError != null)
            {
                <div class="alert alert-danger">
                    @loginError
                </div>
            }
        </div>
    </div>
</div>

@code {
    private LoginRequest loginModel = new();
    private string? loginError;
    private bool _showPassword = false;

    private async Task HandleLogin()
    {
        try
        {
            var response = await Http.PostAsJsonAsync("http://localhost:5140/api/auth/login", loginModel);

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<LoginResult>();

                Console.WriteLine($"Login bem-sucedido! ID do usuário: {result.UserId}");

                await JS.InvokeVoidAsync("localStorage.setItem", "userType", result.userType);
                await JS.InvokeVoidAsync("localStorage.setItem", "userId", result.UserId.ToString());

                if (result.userType == "Organizador")
                {
                    NavigationManager.NavigateTo("/Home_Organizador");
                }
                else if (result.userType == "Participante")
                {
                    NavigationManager.NavigateTo("/Home_Participante");
                }
                else
                {
                    loginError = "Tipo de utilizador desconhecido.";
                }
            }
            else
            {
                loginError = "Email ou senha inválidos.";
            }
        }
        catch (Exception ex)
        {
            loginError = $"Erro ao tentar conectar: {ex.Message}";
        }
    }

    private void TogglePasswordVisibility()
    {
        _showPassword = !_showPassword;
    }

    public class LoginRequest
    {
        public string Email { get; set; } = string.Empty;
        public string Password { get; set; } = string.Empty;
    }

    public class LoginResult
    {
        public string Message { get; set; } = string.Empty;
        public int UserId { get; set; }
        public string userType { get; set; } = string.Empty;
    }
}
