@page "/create-event"
@using Client.Services
@inject ApiService ApiService

<h3>Criar Novo Evento</h3>

@if (Sucesso)
{
    <div class="alert alert-success">Evento criado com sucesso!</div>
}
@if (Erro)
{
    <div class="alert alert-danger">Erro ao criar o evento.</div>
}

<EditForm Model="@NovoEvento" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label>Nome:</label>
        <InputText @bind-Value="NovoEvento.Name" class="form-control" />
    </div>

    <div class="form-group">
        <label>Descri√ß√£o:</label>
        <InputTextArea @bind-Value="NovoEvento.Description" class="form-control" />
    </div>

    <div class="form-group">
        <label>Data:</label>
        <InputDate @bind-Value="NovoEvento.EventDate" class="form-control" />
    </div>

    <div class="form-group">
        <label>Localiza√ß√£o:</label>
        <InputText @bind-Value="NovoEvento.Location" class="form-control" />
    </div>

    <div class="form-group">
        <label>Capacidade:</label>
        <InputNumber @bind-Value="NovoEvento.Capacity" class="form-control" />
    </div>

    <div class="form-group">
        <label>Pre√ßo:</label>
        <InputNumber @bind-Value="NovoEvento.Price" class="form-control" />
    </div>

    <div class="form-group">
        <label>Categoria:</label>
        <InputText @bind-Value="NovoEvento.Category" class="form-control" />
    </div>

    <button type="submit" class="btn btn-primary mt-3">Criar Evento</button>
</EditForm>

@code {
    private ApiService.EventDto NovoEvento = new();
    private bool Sucesso = false;
    private bool Erro = false;

    protected override void OnInitialized()
    {
        // Inicializa valores padr√£o
        NovoEvento = new ApiService.EventDto
        {
            OrganizerId = 1,
            EventDate = DateTime.Today // üëà Define a data inicial como hoje
        };
    }

    private async Task HandleValidSubmit()
    {
        Sucesso = false;
        Erro = false;

        // Apenas converte para UTC se a data for v√°lida
        if (NovoEvento.EventDate != DateTime.MinValue)
        {
            NovoEvento.EventDate = NovoEvento.EventDate.ToUniversalTime();
        }

        var resultado = await ApiService.CreateEventAsync(NovoEvento);
        if (resultado)
        {
            Sucesso = true;

            // Reinicializa o formul√°rio com a data de hoje
            NovoEvento = new ApiService.EventDto
            {
                OrganizerId = 1,
                EventDate = DateTime.Today
            };
        }
        else
        {
            Erro = true;
        }
    }
}
