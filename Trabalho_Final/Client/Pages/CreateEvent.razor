@page "/Create-Event"
@using Client.Services
@inject ApiService ApiService

<h3>Criar Novo Evento</h3>

@if (Sucesso)
{
    <div class="alert alert-success">Evento, bilhetes e atividades criados com sucesso!</div>
}
@if (Erro)
{
    <div class="alert alert-danger">@MensagemErro</div>
}

<EditForm Model="@NovoEvento" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <!-- Evento -->
    <div class="form-group">
        <label>Nome:</label>
        <InputText @bind-Value="NovoEvento.Name" class="form-control" />
    </div>

    <div class="form-group">
        <label>Descrição:</label>
        <InputTextArea @bind-Value="NovoEvento.Description" class="form-control" />
    </div>

    <div class="form-group">
        <label>Data de Início:</label>
        <InputDate @bind-Value="EventStartDate" class="form-control" />
    </div>
    <div class="form-group">
        <label>Hora de Início:</label>
        <InputText type="time" @bind-Value="EventStartTime" class="form-control" />
    </div>
    <div class="form-group">
        <label>Data de Fim:</label>
        <InputDate @bind-Value="EventEndDate" class="form-control" />
    </div>
    <div class="form-group">
        <label>Hora de Fim:</label>
        <InputText type="time" @bind-Value="EventEndTime" class="form-control" />
    </div>

    <div class="form-group">
        <label>Localização:</label>
        <InputText @bind-Value="NovoEvento.Location" class="form-control" />
    </div>

    <div class="form-group">
        <label>Capacidade:</label>
        <InputNumber @bind-Value="NovoEvento.Capacity" class="form-control" />
    </div>

    <div class="form-group">
        <label>Categoria:</label>
        <InputText @bind-Value="NovoEvento.Category" class="form-control" />
    </div>

    <!-- Bilhetes -->
    <hr />
    <h4>Bilhetes</h4>
    <div class="ticket-container">
        @foreach (var ticket in Tickets)
        {
            <div class="ticket-card">
                <div class="form-group">
                    <label>Tipo de Bilhete:</label>
                    <InputText @bind-Value="ticket.TicketType" class="form-control" />
                </div>
                <div class="form-group">
                    <label>Preço:</label>
                    <InputNumber @bind-Value="ticket.Price" class="form-control" />
                </div>
                <div class="form-group">
                    <label>Quantidade:</label>
                    <InputNumber @bind-Value="ticket.QuantityAvailable" class="form-control" />
                </div>
                <div class="form-group">
                    <label>Beneficios:</label>
                    <InputTextArea @bind-Value="ticket.Description" class="form-control" />
                </div>
                <button type="button" class="btn btn-danger mt-2" @onclick="() => RemoverTicket(ticket)">Remover</button>
            </div>
        }
    </div>
    <button type="button" class="btn btn-secondary mb-3" @onclick="AdicionarTicket">+ Adicionar Bilhete</button>

    <!-- Atividades -->
    <hr />
    <h4>Atividades</h4>
    <div class="ticket-container">
        @foreach (var activity in Activities)
        {
            <div class="ticket-card">
                <div class="form-group">
                    <label>Nome:</label>
                    <InputText @bind-Value="activity.Name" class="form-control" />
                </div>
                <div class="form-group">
                    <label>Descrição:</label>
                    <InputTextArea @bind-Value="activity.Description" class="form-control" />
                </div>
                <div class="form-group">
                    <label>Data:</label>
                    <InputDate @bind-Value="activity.StartDate" class="form-control" />
                </div>
                <div class="form-group">
                    <label>Hora de Início:</label>
                    <InputText type="time" @bind-Value="activity.StartTime" class="form-control" />
                </div>
                <div class="form-group">
                    <label>Hora de Término:</label>
                    <InputText type="time" @bind-Value="activity.EndTime" class="form-control" />
                </div>
                <button type="button" class="btn btn-danger mt-2" @onclick="() => RemoverActivity(activity)">Remover</button>
            </div>
        }
    </div>
    <button type="button" class="btn btn-secondary mb-3" @onclick="AdicionarActivity">+ Adicionar Atividade</button>

    <div>
        <button type="submit" class="btn btn-primary">Criar Evento</button>
    </div>
</EditForm>

<style>
    .ticket-container {
        display: flex;
        flex-wrap: wrap;
        gap: 1rem;
        margin-bottom: 1rem;
    }

    .ticket-card {
        border: 1px solid #ccc;
        border-radius: 10px;
        padding: 1rem;
        width: 280px;
        box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        background-color: #f9f9f9;
    }

    .ticket-card .form-group {
        margin-bottom: 0.5rem;
    }
</style>

@code {
    private ApiService.EventDto NovoEvento = new();
    private List<TicketInput> Tickets = new();
    private List<ActivityInput> Activities = new();

    private DateTime EventStartDate = DateTime.Today;
    private DateTime EventEndDate = DateTime.Today;
    private string EventStartTime = "09:00";
    private string EventEndTime = "18:00";

    private string MensagemErro = string.Empty;
    private bool Sucesso = false;
    private bool Erro = false;

    protected override void OnInitialized()
    {
        NovoEvento = new ApiService.EventDto { OrganizerId = 1 };
        Tickets.Add(new TicketInput());
        Activities.Add(new ActivityInput());
    }

    private async Task HandleValidSubmit()
    {
        Sucesso = false;
        Erro = false;
        MensagemErro = string.Empty;

        if (Tickets.Count == 0 || Tickets.Any(t => string.IsNullOrWhiteSpace(t.TicketType)))
        {
            Erro = true;
            MensagemErro = "O evento deve ter pelo menos um bilhete com tipo definido.";
            return;
        }

        var totalBilhetes = Tickets.Sum(t => t.QuantityAvailable);
        if (totalBilhetes != NovoEvento.Capacity)
        {
            Erro = true;
            MensagemErro = $"A soma dos bilhetes ({totalBilhetes}) deve ser igual à capacidade do evento ({NovoEvento.Capacity}).";
            return;
        }

        if (!TimeSpan.TryParse(EventStartTime, out var startHora) || !TimeSpan.TryParse(EventEndTime, out var endHora))
        {
            Erro = true;
            MensagemErro = "Hora de início ou fim do evento inválida.";
            return;
        }

        var dataHoraInicio = DateTime.SpecifyKind(EventStartDate.Date + startHora, DateTimeKind.Utc);
        var dataHoraFim = DateTime.SpecifyKind(EventEndDate.Date + endHora, DateTimeKind.Utc);

        if (dataHoraInicio >= dataHoraFim)
        {
            Erro = true;
            MensagemErro = "A data/hora de fim do evento deve ser posterior à de início.";
            return;
        }

        NovoEvento.EventStartDate = dataHoraInicio;
        NovoEvento.EventEndDate = dataHoraFim;

        if (Activities.Any())
        {
            foreach (var a in Activities)
            {
                if (string.IsNullOrWhiteSpace(a.Name) ||
                    !TimeSpan.TryParse(a.StartTime, out var hs) ||
                    !TimeSpan.TryParse(a.EndTime, out var he))
                {
                    Erro = true;
                    MensagemErro = "Todas as atividades devem ter nome, hora de início e fim válidas.";
                    return;
                }

                var atividadeInicio = a.StartDate.Date + hs;
                var atividadeFim = a.StartDate.Date + he;

                if (atividadeInicio < dataHoraInicio || atividadeFim > dataHoraFim)
                {
                    Erro = true;
                    MensagemErro = "Atividades devem estar dentro do intervalo de data/hora do evento.";
                    return;
                }

                if (atividadeInicio >= atividadeFim)
                {
                    Erro = true;
                    MensagemErro = "Atividade deve terminar após a hora de início.";
                    return;
                }
            }
        }


        try
        {
            var eventId = await ApiService.CreateEventAsync(NovoEvento);
            if (eventId is null)
            {
                Erro = true;
                MensagemErro = "Erro ao criar evento.";
                return;
            }

            foreach (var t in Tickets)
            {
                var success = await ApiService.CreateTicketAsync(new ApiService.EventTicketDto
                {
                    EventId = eventId.Value,
                    TicketType = t.TicketType,
                    Price = t.Price,
                    QuantityAvailable = t.QuantityAvailable,
                    Description = t.Description
                });

                if (!success)
                {
                    Erro = true;
                    MensagemErro = $"Erro ao criar o bilhete do tipo '{t.TicketType}'.";
                    return;
                }
            }

            foreach (var act in Activities)
            {
                TimeSpan.TryParse(act.StartTime, out var hs);
                TimeSpan.TryParse(act.EndTime, out var he);

                var success = await ApiService.CreateActivityAsync(new ApiService.ActivityDto
                {
                    EventId = eventId.Value,
                    Name = act.Name,
                    Description = act.Description,
                    ActivityStartDate = DateTime.SpecifyKind(act.StartDate.Date + hs, DateTimeKind.Utc),
                    ActivityEndDate = DateTime.SpecifyKind(act.StartDate.Date + he, DateTimeKind.Utc),
                    CreatedAt = DateTime.UtcNow,
                    UpdatedAt = DateTime.UtcNow
                });

                if (!success)
                {
                    Erro = true;
                    MensagemErro = $"Erro ao criar a atividade '{act.Name}'.";
                    return;
                }
            }

            Sucesso = true;
            MensagemErro = string.Empty;
            NovoEvento = new ApiService.EventDto { OrganizerId = 1 };
            EventStartDate = EventEndDate = DateTime.Today;
            EventStartTime = "09:00";
            EventEndTime = "18:00";
            Tickets.Clear(); Tickets.Add(new TicketInput());
            Activities.Clear(); Activities.Add(new ActivityInput());
        }
        catch
        {
            Erro = true;
            MensagemErro = "Erro ao salvar dados.";
        }
    }

    private void AdicionarTicket() => Tickets.Add(new TicketInput());
    private void RemoverTicket(TicketInput ticket) => Tickets.Remove(ticket);
    private void AdicionarActivity() => Activities.Add(new ActivityInput());
    private void RemoverActivity(ActivityInput activity) => Activities.Remove(activity);

    private class TicketInput
    {
        public string TicketType { get; set; } = string.Empty;
        public decimal Price { get; set; }
        public int QuantityAvailable { get; set; }
        public string Description { get; set; } = string.Empty;
    }

    private class ActivityInput
    {
        public string Name { get; set; } = string.Empty;
        public string Description { get; set; } = string.Empty;
        public DateTime StartDate { get; set; } = DateTime.Today;
        public string StartTime { get; set; } = "09:00";
        public string EndTime { get; set; } = "10:00";
    }
}
