@page "/Create-Event"
@using System.Text.Json
@using Client.Services
@inject ApiService ApiService
@inject HttpClient Http
@inject IJSRuntime JS

<h3>Criar Novo Evento</h3>

@if (Sucesso)
{
    <div class="alert alert-success">Evento, bilhetes e atividades criados com sucesso!</div>
}
@if (Erro)
{
    <div class="alert alert-danger">@MensagemErro</div>
}

<EditForm Model="@NovoEvento" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <!-- Evento -->
    <div class="form-group">
        <label>Nome:</label>
        <InputText @bind-Value="NovoEvento.Name" class="form-control" />
    </div>
    <div class="form-group">
        <label>Descrição:</label>
        <InputTextArea @bind-Value="NovoEvento.Description" class="form-control" />
    </div>
    <div class="form-group">
        <label>Data de Início:</label>
        <InputDate @bind-Value="EventStartDate" class="form-control" />
    </div>
    <div class="form-group">
        <label>Hora de Início:</label>
        <InputText type="time" @bind-Value="EventStartTime" class="form-control" />
    </div>
    <div class="form-group">
        <label>Data de Fim:</label>
        <InputDate @bind-Value="EventEndDate" class="form-control" />
    </div>
    <div class="form-group">
        <label>Hora de Fim:</label>
        <InputText type="time" @bind-Value="EventEndTime" class="form-control" />
    </div>
    <div class="form-group">
        <label>Localização:</label>
        <InputText @bind-Value="NovoEvento.Location" class="form-control" />
    </div>
    <div class="form-group">
        <label>Capacidade:</label>
        <InputNumber @bind-Value="NovoEvento.Capacity" class="form-control" />
    </div>
    <div class="form-group">
        <label>Categoria:</label>
        <InputText @bind-Value="NovoEvento.Category" class="form-control" />
    </div>

    <!-- Bilhetes -->
    <hr />
    <h4>Bilhetes</h4>
    <div class="ticket-container">
        @foreach (var ticket in Tickets)
        {
            <div class="ticket-card">
                <div class="form-group">
                    <label>Tipo de Bilhete:</label>
                    <InputText @bind-Value="ticket.TicketType" class="form-control" />
                </div>
                <div class="form-group">
                    <label>Preço:</label>
                    <InputNumber @bind-Value="ticket.Price" class="form-control" />
                </div>
                <div class="form-group">
                    <label>Quantidade:</label>
                    <InputNumber @bind-Value="ticket.QuantityAvailable" class="form-control" />
                </div>
                <div class="form-group">
                    <label>Benefícios:</label>
                    <InputTextArea @bind-Value="ticket.Description" class="form-control" />
                </div>
                <button type="button" class="btn btn-danger mt-2" @onclick="() => RemoverTicket(ticket)">
                    Remover
                </button>
            </div>
        }
    </div>
    <button type="button" class="btn btn-secondary mb-3" @onclick="AdicionarTicket">
        + Adicionar Bilhete
    </button>

    <!-- Atividades -->
    <hr />
    <h4>Atividades</h4>
    <div class="ticket-container">
        @foreach (var activity in Activities)
        {
            <div class="ticket-card">
                <div class="form-group">
                    <label>Nome:</label>
                    <InputText @bind-Value="activity.Name" class="form-control" />
                </div>
                <div class="form-group">
                    <label>Descrição:</label>
                    <InputTextArea @bind-Value="activity.Description" class="form-control" />
                </div>
                <div class="form-group">
                    <label>Data:</label>
                    <InputDate @bind-Value="activity.StartDate" class="form-control" />
                </div>
                <div class="form-group">
                    <label>Hora de Início:</label>
                    <InputText type="time" @bind-Value="activity.StartTime" class="form-control" />
                </div>
                <div class="form-group">
                    <label>Hora de Término:</label>
                    <InputText type="time" @bind-Value="activity.EndTime" class="form-control" />
                </div>
                <button type="button" class="btn btn-danger mt-2" @onclick="() => RemoverActivity(activity)">
                    Remover
                </button>
            </div>
        }
    </div>
    <button type="button" class="btn btn-secondary mb-3" @onclick="AdicionarActivity">
        + Adicionar Atividade
    </button>

    <div>
        <button type="submit" class="btn btn-primary">Criar Evento</button>
    </div>
</EditForm>

<style>
    .ticket-container {
        display: flex;
        flex-wrap: wrap;
        gap: 1rem;
        margin-bottom: 1rem;
    }
    .ticket-card {
        border: 1px solid #ccc;
        border-radius: 10px;
        padding: 1rem;
        width: 280px;
        box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        background-color: #f9f9f9;
    }
    .ticket-card .form-group {
        margin-bottom: 0.5rem;
    }
</style>

@code {
    private ApiService.EventDto NovoEvento = new();
    private List<TicketInput> Tickets = new();
    private List<ActivityInput> Activities = new();

    private DateTime EventStartDate = DateTime.Today;
    private DateTime EventEndDate = DateTime.Today;
    private string EventStartTime = "09:00";
    private string EventEndTime = "18:00";

    private bool Sucesso;
    private bool Erro;
    private string MensagemErro = string.Empty;

    protected override void OnInitialized()
    {
        // Carrega o OrganizerId do localStorage
        var userIdStr = JS.InvokeAsync<string>("localStorage.getItem", "userId").Result;
        NovoEvento.OrganizerId = int.TryParse(userIdStr, out var id) ? id : 0;

        Tickets.Add(new TicketInput());
        Activities.Add(new ActivityInput());
    }

    private async Task HandleValidSubmit()
    {
        Sucesso = Erro = false;
        MensagemErro = string.Empty;

        // Envia header X-UserType para o servidor
        var userType = await JS.InvokeAsync<string>("localStorage.getItem", "userType");
        Http.DefaultRequestHeaders.Remove("X-UserType");
        Http.DefaultRequestHeaders.Add("X-UserType", userType);

        // Prepara datas e horas
        NovoEvento.EventStartDate = EventStartDate.Date + TimeSpan.Parse(EventStartTime);
        NovoEvento.EventEndDate   = EventEndDate.Date   + TimeSpan.Parse(EventEndTime);

        // 1) Cria evento
        var resp = await Http.PostAsJsonAsync("api/Event", NovoEvento);
        if (!resp.IsSuccessStatusCode)
        {
            Erro = true;
            MensagemErro = "Erro ao criar evento.";
            return;
        }

        var data = await resp.Content.ReadFromJsonAsync<JsonElement>();
        var eventId = data.GetProperty("eventId").GetInt32();

        // 2) Cria bilhetes
        foreach (var t in Tickets)
        {
            var ok = await ApiService.CreateTicketAsync(new ApiService.EventTicketDto
            {
                EventId          = eventId,
                TicketType       = t.TicketType,
                Price            = t.Price,
                QuantityAvailable= t.QuantityAvailable,
                Description      = t.Description
            });
            if (!ok)
            {
                Erro = true;
                MensagemErro = $"Erro ao criar bilhete '{t.TicketType}'.";
                return;
            }
        }

        // 3) Cria atividades
        foreach (var a in Activities)
        {
            var ok = await ApiService.CreateActivityAsync(new ApiService.ActivityDto
            {
                EventId            = eventId,
                Name               = a.Name,
                Description        = a.Description,
                ActivityStartDate  = a.StartDate.Date + TimeSpan.Parse(a.StartTime),
                ActivityEndDate    = a.StartDate.Date + TimeSpan.Parse(a.EndTime),
                CreatedAt          = DateTime.UtcNow,
                UpdatedAt          = DateTime.UtcNow
            });
            if (!ok)
            {
                Erro = true;
                MensagemErro = $"Erro ao criar atividade '{a.Name}'.";
                return;
            }
        }

        Sucesso = true;
    }

    private void AdicionarTicket() => Tickets.Add(new TicketInput());
    private void RemoverTicket(TicketInput t) => Tickets.Remove(t);
    private void AdicionarActivity() => Activities.Add(new ActivityInput());
    private void RemoverActivity(ActivityInput a) => Activities.Remove(a);

    private class TicketInput
    {
        public string TicketType { get; set; } = string.Empty;
        public decimal Price { get; set; }
        public int QuantityAvailable { get; set; }
        public string Description { get; set; } = string.Empty;
    }
    private class ActivityInput
    {
        public string Name { get; set; } = string.Empty;
        public string Description { get; set; } = string.Empty;
        public DateTime StartDate { get; set; } = DateTime.Today;
        public string StartTime { get; set; } = "09:00";
        public string EndTime { get; set; } = "10:00";
    }
}
