@page "/Edit-Profile"
@using Client.Services
@inject ApiService ApiService
@inject NavigationManager NavigationManager
@inject IJSRuntime JS

<div class="edit-profile-container">
    <div class="text-center mb-4">
        <h1 class="fw-bold display-6">🪪 Editar Perfil</h1>
    </div>

    @if (Sucesso)
    {
        <div class="alert alert-success">Perfil atualizado com sucesso!</div>
    }
    @if (Erro)
    {
        <div class="alert alert-danger">@MensagemErro</div>
    }

    <EditForm Model="@UserUpdate" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator/>
        <ValidationSummary/>

        <div class="card form-card">
            <div class="form-group">
                <label>Nome:</label>
                <div class="input-wrapper">
                    <i class="fas fa-user icon-left"></i>
                    <InputText @bind-Value="UserUpdate.Name" class="form-control"/>
                </div>
            </div>

            <div class="form-group">
                <label>E-mail:</label>
                <div class="input-wrapper">
                    <i class="fas fa-envelope icon-left"></i>
                    <InputText @bind-Value="UserUpdate.Email" class="form-control" placeholder="exemplo@dominio.com"/>
                </div>
            </div>


            <div class="form-group">
                <label>Número de Telefone:</label>
                <div class="input-wrapper">
                    <i class="fas fa-phone icon-left"></i>
                    <InputText @bind-Value="UserUpdate.PhoneNumber" class="form-control"/>
                </div>
            </div>

            <div class="form-group">
                <label>Nova Senha (opcional):</label>
                <div class="input-wrapper">
                    <i class="fas fa-lock icon-left"></i>
                    <InputText type="password" @bind-Value="UserUpdate.Password" class="form-control"/>
                </div>
            </div>


            <div class="form-buttons">
                <button type="submit" class="btn btn-primary">💾 Atualizar</button>
                <button type="button" class="btn btn-secondary" @onclick="Cancelar">❌ Cancelar</button>
            </div>
        </div>
    </EditForm>
</div>

<style>

    .input-wrapper {
        position: relative;
    }

    .icon-left {
        position: absolute;
        top: 50%;
        left: 10px;
        transform: translateY(-50%);
        color: #999;
    }

    .form-control {
        width: 100%;
        padding: 0.6rem 2.5rem;
        border-radius: 0.5rem;
        border: 1px solid #ccc;
    }

    .edit-profile-container {
        max-width: 600px;
        margin: 2rem auto;
        padding: 1rem;
    }

    .page-title {
        text-align: center;
        margin-bottom: 1.5rem;
        color: #333;
    }

    .form-card {
        background-color: white;
        padding: 2rem;
        border-radius: 10px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    }

    .form-group {
        margin-bottom: 1.2rem;
    }
    

    .form-buttons {
        display: flex;
        justify-content: flex-end;
        gap: 1rem;
        margin-top: 1.5rem;
    }

    .alert {
        padding: 0.9rem;
        border-radius: 6px;
        margin-bottom: 1rem;
        font-weight: 500;
    }

    .alert-success {
        background-color: #d4edda;
        color: #155724;
        border: 1px solid #c3e6cb;
    }

    .alert-danger {
        background-color: #f8d7da;
        color: #721c24;
        border: 1px solid #f5c6cb;
    }

    .btn {
        padding: 0.5rem 1.2rem;
        border-radius: 6px;
        font-weight: bold;
        border: none;
        cursor: pointer;
    }

    .btn-primary {
        background-color: #007bff;
        color: white;
    }

    .btn-secondary {
        background-color: #6c757d;
        color: white;
    }
</style>


@code {
    private ApiService.UserUpdateDto UserUpdate = new();
    private string MensagemErro = string.Empty;
    private bool Sucesso = false;
    private bool Erro = false;
    private int UserId;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var userIdString = await JS.InvokeAsync<string>("localStorage.getItem", "userId");

            if (!int.TryParse(userIdString, out UserId))
            {
                Erro = true;
                MensagemErro = "ID de utilizador inválido.";
                return;
            }

            var userData = await ApiService.GetUserAsync(UserId);
            UserUpdate = userData;
            UserUpdate.Id = UserId;
            UserUpdate.Password = null;
        }
        catch
        {
            Erro = true;
            MensagemErro = "Erro ao carregar dados do utilizador.";
        }
    }

    private async Task HandleValidSubmit()
    {
        Sucesso = false;
        Erro = false;
        MensagemErro = string.Empty;

        try
        {
            var response = await ApiService.UpdateUserAsync(UserUpdate);
            if (response.Contains("sucesso"))
            {
                Sucesso = true;
                await Task.Delay(2000);
                NavigationManager.NavigateTo("/Edit-Profile");
            }
            else
            {
                Erro = true;
                MensagemErro = response; 
            }
        }
        catch
        {
            Erro = true;
            MensagemErro = "Erro ao atualizar perfil.";
        }
    }

    private async Task Cancelar()
    {
        await JS.InvokeVoidAsync("history.back");
    }
}