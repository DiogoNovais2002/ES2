@page "/Home_Participante"
@using Client.Services
@inject ApiService ApiService
@inject IJSRuntime JS
@inject NavigationManager Nav

<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h1 class="fw-bold">üìã Eventos Dispon√≠veis </h1>
    </div>

    <div class="search-bar d-flex flex-wrap gap-3 align-items-center mb-4">
        <input type="text" class="form-control flex-grow-1" @bind="searchTerm" placeholder="üîç Pesquisar por nome"/>

        <button class="btn btn-outline-success" @onclick="AplicarFiltros">Aplicar Filtros</button>

        <select class="form-select w-auto" @bind="SelectedCategory">
            <option value="">üìÇ Categorias</option>
            @foreach (var categoria in categorias)
            {
                <option value="@categoria">@categoria</option>
            }
        </select>

        <select class="form-select w-auto" @bind="SelectedLocation">
            <option value="">üìç Localidades</option>
            @foreach (var loc in local)
            {
                <option value="@loc">@loc</option>
            }
        </select>

        <select class="form-select w-auto" @bind="SelectedTime">
            <option value="">üïí Datas</option>
            @foreach (var time in data)
            {
                <option value="@time">@time</option>
            }
        </select>
    </div>

    @if (FilteredEventos.Any())
    {
        <div class="d-flex justify-content-center">
            <div class="event-container row row-cols-auto g-3">
                @foreach (var evento in FilteredEventos)
                {
                    <div class="col">
                        <EventCard Event="evento" OnParticipate="NavigateToEventDetails" />
                    </div>
                }
            </div>
        </div>
    }
    else
    {
        <div class="alert alert-warning mt-4">
            Nenhum evento encontrado com os filtros selecionados.
        </div>
    }

</div>
<style>
    .search-bar input, 
    .search-bar select { min-width: 160px; max-width: 80% } 
    .event-container { margin-top: 20px; } 
    input::placeholder { color: #888; } 
    select { cursor: pointer; }
</style>

@code {
    private List<ApiService.EventDto> eventos = new();
    private List<ApiService.EventDto> todosEventos = new();
    private List<ApiService.EventDto> meusEventosInscritos = new();
    private List<string> categorias = new();
    private List<string> local = new();
    private List<string> data = new();
    private int? userId;
    private string? userType;

    private string searchTerm = string.Empty;
    private string selectedCategory = string.Empty;
    private string selectedLocation = string.Empty;
    private string selectedTime = string.Empty;

    private string SelectedCategory
    {
        get => selectedCategory;
        set
        {
            if (selectedCategory != value)
            {
                selectedCategory = value;
                UpdateDependentFiltersOnCategoryChange();
            }
        }
    }

    private string SelectedLocation
    {
        get => selectedLocation;
        set
        {
            if (selectedLocation != value)
            {
                selectedLocation = value;
                UpdateDependentFiltersOnLocationChange();
            }
        }
    }

    private string SelectedTime
    {
        get => selectedTime;
        set
        {
            if (selectedTime != value)
            {
                selectedTime = value;
                UpdateDependentFiltersOnTimeChange();
            }
        }
    }

    private async Task AplicarFiltros()
    {
        await AtualizarFiltrosDependentes();
        ResetFiltros();
    }

    private void ResetFiltros()
    {
        searchTerm = string.Empty;
        selectedCategory = string.Empty;
        selectedLocation = string.Empty;
        selectedTime = string.Empty;
    }

    private async Task AtualizarFiltrosDependentes()
    {
        var filtrados = todosEventos
            .Where(e => string.IsNullOrEmpty(selectedCategory) || e.Category == selectedCategory)
            .Where(e => string.IsNullOrEmpty(selectedLocation) || e.Location == selectedLocation)
            .Where(e => string.IsNullOrEmpty(selectedTime) || e.EventStartDate.ToString("yyyy-MM-dd") == selectedTime)
            .Where(e => !meusEventosInscritos.Any(ie => ie.Id == e.Id))
            .ToList();

        categorias = filtrados.Select(e => e.Category).Distinct().ToList();
        local = filtrados.Select(e => e.Location).Distinct().ToList();
        data = filtrados.Select(e => e.EventStartDate.ToString("yyyy-MM-dd")).Distinct().ToList();

        eventos = filtrados;
        StateHasChanged();
    }

    private void UpdateDependentFiltersOnCategoryChange()
    {
        var filteredLocations = eventos.Where(e => e.Category == selectedCategory).Select(e => e.Location).Distinct().ToList();
        var filteredDates = eventos.Where(e => e.Category == selectedCategory).Select(e => e.EventStartDate.ToString("yyyy-MM-dd")).Distinct().ToList();

        local = filteredLocations;
        data = filteredDates;
    }

    private void UpdateDependentFiltersOnLocationChange()
    {
        var filteredCategories = eventos.Where(e => e.Location == selectedLocation).Select(e => e.Category).Distinct().ToList();
        var filteredDates = eventos.Where(e => e.Location == selectedLocation).Select(e => e.EventStartDate.ToString("yyyy-MM-dd")).Distinct().ToList();

        categorias = filteredCategories;
        data = filteredDates;
    }

    private void UpdateDependentFiltersOnTimeChange()
    {
        if (!string.IsNullOrEmpty(selectedTime))
        {
            categorias = eventos.Where(e => e.EventStartDate.ToString("yyyy-MM-dd") == selectedTime)
                                .Select(e => e.Category)
                                .Distinct()
                                .ToList();

            local = eventos.Where(e => e.EventStartDate.ToString("yyyy-MM-dd") == selectedTime)
                           .Select(e => e.Location)
                           .Distinct()
                           .ToList();
        }
        else
        {
            categorias = eventos.Select(e => e.Category).Distinct().ToList();
            local = eventos.Select(e => e.Location).Distinct().ToList();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var type = await JS.InvokeAsync<string>("localStorage.getItem", "userType");
        if (type != "Participante")
        {
            Nav.NavigateTo("/");
            return;
        }

        var userIdString = await JS.InvokeAsync<string>("localStorage.getItem", "userId");
        int tempId;
        if (!string.IsNullOrEmpty(userIdString) && int.TryParse(userIdString, out tempId))
        {
            userId = tempId;
            await LoadData();
        }

        await LoadData();
    }

    private async Task LoadData()
    {
        todosEventos = await ApiService.GetEventsAsync();
        meusEventosInscritos = await ApiService.GetEventsByParticipantAsync(userId.Value);

        eventos = todosEventos
            .Where(e => !meusEventosInscritos.Any(ie => ie.Id == e.Id))
            .ToList();

        categorias = eventos.Select(e => e.Category).Distinct().ToList();
        local = eventos.Select(e => e.Location).Distinct().ToList();
        data = eventos.Select(e => e.EventStartDate.ToString("yyyy-MM-dd")).Distinct().ToList();
    }

    private void NavigateToEventDetails(int eventId)
    {
        Nav.NavigateTo($"/evento-detalhes/{eventId}");
    }

    private void NavigateToMeusEventos() =>
        Nav.NavigateTo("/Meus_Eventos");

    private IEnumerable<ApiService.EventDto> FilteredEventos => eventos
        .Where(e =>
            (string.IsNullOrEmpty(searchTerm) || e.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
        );
}
