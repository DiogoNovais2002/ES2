@page "/Home_Participante"
@using Client.Services
@inject ApiService ApiService
@inject UserService UserService
@inject IJSRuntime JS
@inject NavigationManager Nav

<h3>Lista de Eventos</h3>

<div class="search-bar">
    <input type="text" @bind="searchTerm" placeholder="Pesquisar por nome" />

    <select @bind="selectedCategory" class="Combobox-large">
        <option value="">Categorias</option>
        @foreach (var categoria in categorias)
        {
            <option value="@categoria">@categoria</option>
        }
    </select>
    
    <select @bind="selectedLocation" class="Combobox-large">
        <option value="">Localidades</option>
        @foreach (var loc in local)
        {
            <option value="@loc">@loc</option>
        }
    </select>

    <select @bind="selectedTime" class="Combobox-large">
        <option value="">Datas</option>
        @foreach (var time in data)
        {
            <option value="@time">@time</option>
        }
    </select>

    <button class="btn btn-secondary" @onclick="NavigateToMeusEventos">Meus Eventos</button>
</div>

@if (FilteredEventos.Any())
{
    <div class="event-container">
        @foreach (var evento in FilteredEventos)
        {
            <EventCard Event="evento" OnParticipate="HandleParticipateClick" />
        }
    </div>
}
else
{
    <p>Nenhum evento encontrado com os filtros selecionados.</p>
}

@code {
    private List<ApiService.EventDto> eventos = new();
    private List<ApiService.EventDto> meusEventosInscritos = new();
    private List<string> categorias = new();
    private List<string> local = new();
    private List<string> data = new();
    private int? userId;
    private string? userType;

    private string searchTerm = string.Empty;
    private string selectedCategory = string.Empty;
    private string selectedLocation = string.Empty;
    private string selectedTime = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        // 1. Verifica role antes de carregar dados
        var type = await JS.InvokeAsync<string>("localStorage.getItem", "userType");
        if (type != "Participante")
        {
            NavigationManager.NavigateTo("/");
            return;
        }

        // 2. Lê userId e carrega dados
        var userIdString = await JS.InvokeAsync<string>("localStorage.getItem", "userId");
        if (!string.IsNullOrEmpty(userIdString) && int.TryParse(userIdString, out userId))
        {
            await LoadData();

        }

        await LoadData();
    }

    private async Task LoadData()
    {
        eventos = await ApiService.GetEventsAsync();
        categorias = await ApiService.GetEventCategoriesAsync();
        local = await ApiService.GetLocalidadesAsync();
        data = await ApiService.GetDataAsync();

        meusEventosInscritos = await ApiService.GetEventsByParticipantAsync(userId);  

        eventos = eventos.Where(e => !meusEventosInscritos.Any(ie => ie.Id == e.Id)).ToList();
    }

    private async Task HandleParticipateClick(int eventId)
    {

        if (userId <= 0){
            await JS.InvokeVoidAsync("alert", "ID de usuário inválido. Faça login novamente.");
            return;
        }

        bool success = await ApiService.ParticiparEventoAsync(userId, eventId);
        if (success)
        {
            await JS.InvokeVoidAsync("alert", "Inscrição realizada com sucesso!");
            meusEventosInscritos = await ApiService.GetEventsByParticipantAsync(userId);
            var eventoInscrito = eventos.FirstOrDefault(e => e.Id == eventId);
            if (eventoInscrito != null) eventos.Remove(eventoInscrito);

            StateHasChanged();
        }
        else
        {
            await JS.InvokeVoidAsync("alert", "Não foi possível realizar a inscrição. Tente novamente.");
        }
    }

    private void NavigateToMeusEventos() =>
        Nav.NavigateTo("/Meus_Eventos");

    private IEnumerable<ApiService.EventDto> FilteredEventos =>
        eventos.Where(e =>
            (string.IsNullOrEmpty(searchTerm) || e.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) &&
            (string.IsNullOrEmpty(selectedCategory) || e.Category == selectedCategory) &&
            (string.IsNullOrEmpty(selectedLocation) || e.Location == selectedLocation) &&
            (string.IsNullOrEmpty(selectedTime) || e.EventStartDate.ToString("yyyy-MM-dd") == selectedTime)
        );
}