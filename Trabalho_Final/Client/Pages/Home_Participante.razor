@page "/Home_Participante"
@using Client.Services
@inject ApiService ApiService

<h3>Lista de Eventos</h3>

<div class="search-bar">
    <input type="text" @bind="searchTerm" placeholder="Pesquisar por nome" />

    <select @bind="selectedCategory" class="Combobox-large">
        <option value="">Categorias</option>
        @foreach (var categoria in categorias)
        {
            <option value="@categoria">@categoria</option>
        }
    </select>
    
    <select @bind="selectedLocation" class="Combobox-large">
        <option value="">Localidades</option>
        @foreach (var loc in local)
        {
        <option value="@loc">@loc</option>
        }
    </select>
    <select @bind="selectedTime" class="Combobox-large">
        <option value="">Datas</option>
        @foreach (var time in data)
        {
        <option value="@time">@time</option>
        }
    </select>

</div>

@if (FilteredEventos.Any())
{
    <div class="event-container">
        @foreach (var evento in FilteredEventos)
        {
            <EventCard Event="evento" OnParticipate="HandleButtonClick" />
        }
    </div>
}

@code {
    private List<ApiService.EventDto> eventos = new();
    private List<string> categorias = new();
    private List<string> local = new();
    private List<string> data = new();

    private string searchTerm = string.Empty;
    private string selectedCategory = string.Empty;
    private string selectedLocation = string.Empty;
    private string selectedTime = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        eventos = await ApiService.GetEventsAsync();
        categorias = await ApiService.GetEventCategoriesAsync();
        local = await ApiService.GetLocalidadesAsync();
        data = await ApiService.GetDataAsync();
    }

    private void HandleButtonClick(int eventId)
    {
        Console.WriteLine($" evento ID: {eventId}");
    }

    private IEnumerable<ApiService.EventDto> FilteredEventos =>
        eventos.Where(e =>
            (string.IsNullOrEmpty(searchTerm) || e.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) &&
            (string.IsNullOrEmpty(selectedCategory) || e.Category == selectedCategory) &&
            (string.IsNullOrEmpty(selectedLocation) || e.Location == selectedLocation) &&
            (string.IsNullOrEmpty(selectedTime) || e.EventStartDate.ToString("yyyy-MM-dd") == selectedTime)
        );

}