@inject IJSRuntime JS
@inject NavigationManager NavigationManager

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">Client</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass nav-scrollable" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        @if (userTypeLoaded && userType == "Organizador" && 
             !NavigationManager.Uri.Contains("login") &&
             !NavigationManager.Uri.Contains("register"))
        {
            <div class="nav-item px-3">
                <NavLink class="nav-link d-flex align-items-center gap-2 fs-5" href="Home_Organizador">
                    <span class="bi bi-house-door"></span> Home
                </NavLink>
                <NavLink class="nav-link d-flex align-items-center gap-2 fs-5" href="create-event">
                    <span class="bi bi-calendar-event"></span> Criar Evento
                </NavLink>
                <NavLink class="nav-link d-flex align-items-center gap-2 fs-5" href="EventReport">
                    <span class="bi bi-bar-chart-line"></span> Relatório Evento
                </NavLink>
            </div>
        }
        @if (userTypeLoaded && userType == "Participante" && 
             !NavigationManager.Uri.Contains("login") &&
             !NavigationManager.Uri.Contains("register"))
        {
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="meus-eventos">
                    <span class="bi bi-card-list" aria-hidden="true"></span> Meus Eventos
                </NavLink>
            </div>
        }
    </nav>
</div>

@code {
    private bool collapseNavMenu = true;
    private string? userType;
    private bool userTypeLoaded = false;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu() => collapseNavMenu = !collapseNavMenu;

    protected override async Task OnInitializedAsync()
    {
        NavigationManager.LocationChanged += OnLocationChanged;
        await LoadUserType();
    }

    private async void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        await LoadUserType();
        StateHasChanged();
    }

    private async Task LoadUserType()
    {
        userType = await JS.InvokeAsync<string>("localStorage.getItem", "userType");
        userTypeLoaded = true;
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}