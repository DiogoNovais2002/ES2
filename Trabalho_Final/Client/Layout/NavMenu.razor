@inject IJSRuntime Js
@inject NavigationManager NavigationManager

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" @onclick="RedirectHome">Client</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>
<div class="@NavMenuCssClass nav-scrollable position-relative" @onclick="ToggleNavMenu" style="height: 100vh;">
    <nav class="flex-column d-flex h-100 justify-content-between">
        <div>
            @if (userTypeLoaded && userType == "Organizador" && 
                 !NavigationManager.Uri.Contains("login") &&
                 !NavigationManager.Uri.Contains("register"))
            {
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="/Home_Organizador">
                        🏠 Home
                    </NavLink>
                    <NavLink class="nav-link" href="/create-event">
                        🎉 Criar Evento
                    </NavLink>
                    <NavLink class="nav-link" href="/EventReport">
                        📃 Relatório Evento
                    </NavLink>
                    <NavLink href="/participants" Match="NavLinkMatch.All">
                        Listar Participantes
                    </NavLink>
                    <div class="mb-3"></div>

                    <NavLink class="nav-link" href="/event-detail-report">
                        📃 Relatório específico do Evento
                    </NavLink>
                    <NavLink class="nav-link" href="/Edit-Profile">
                        🪪 Editar Perfil
                    </NavLink>
                </div>
            }
            @if (userTypeLoaded && userType == "Participante" && 
                 !NavigationManager.Uri.Contains("login") &&
                 !NavigationManager.Uri.Contains("register"))
            {
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="/Home_Participante">
                        🏠 Home
                    </NavLink>
                    <NavLink class="nav-link" href="/Meus_Eventos">
                        📋 Meus Eventos
                    </NavLink>
                    <NavLink class="nav-link" href="/Edit-Profile">
                        🪪 Editar Perfil
                    </NavLink>
                </div>
            }
        </div>

        @if (userTypeLoaded && 
             !NavigationManager.Uri.Contains("login") &&
             !NavigationManager.Uri.Contains("register"))
        {
            <div class="nav-item px-3 mb-5">
                <NavLink class="nav-link text-danger" href="#" @onclick="Logout">
                    🚪 Logout
                </NavLink>
            </div>
        }
    </nav>
</div>


@code {
    private bool collapseNavMenu = true;
    private string? userType;
    private bool userTypeLoaded;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu() => collapseNavMenu = !collapseNavMenu;

    protected override async Task OnInitializedAsync()
    {
        NavigationManager.LocationChanged += OnLocationChanged;
        await LoadUserType();
    }

    private async void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        await LoadUserType();
        StateHasChanged();
    }

    private async Task LoadUserType()
    {
        userType = await Js.InvokeAsync<string>("localStorage.getItem", "userType");
        userTypeLoaded = true;
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
    private void RedirectHome()
    {
        if (!userTypeLoaded) return;

        if (userType == "Participante")
        {
            NavigationManager.NavigateTo("Home_Participante");
        }
        else if (userType == "Organizador")
        {
            Console.WriteLine(userType);
            NavigationManager.NavigateTo("/Home_Organizador");
        }
    }
    private async Task Logout()
    {
        await Js.InvokeVoidAsync("localStorage.removeItem", "userType");
        await Js.InvokeVoidAsync("localStorage.removeItem", "userId");
        NavigationManager.NavigateTo("/login", forceLoad: true);
    }

}